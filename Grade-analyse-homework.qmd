---
title: "Grade analysis homework"
format: html
editor: visual
---

```{r}
#| echo: false
#| message: false
here::i_am("Grade analysis.Rproj")
library(here)
library(dplyr)
library(ggplot2)
library(tidyr)
library(vroom)
library(knitr)
library(stringr)
```

# Question 1

## Introduction

```{r}
#| message: false
grades <- vroom(here("grades.csv"))
```

## Example

```{r}
#| echo: false
#| message: false
grades |> summarise(anyNA(Exam))
is.na(c(1, 2, NA, 4, NA))
```

# Question 2

```{r}
#| echo: false
#| message: false
grades %>%
  summarise(
    Minimum = min(Exam, na.rm = TRUE),
    Maximum = max(Exam, na.rm = TRUE),
    Median = median(Exam, na.rm = TRUE),
    Mean = mean(Exam, na.rm = TRUE)
  ) %>%
  kable()
```

# Question 3

```{r}
not_take_exam_count <- grades %>% count(is.na(Exam))
print(not_take_exam_count)

#| echo: false
#| message: false
not_take_exam_count <- grades %>%
  filter(is.na(Exam)) %>%
  nrow()
cat("The number of students who did not take the final exam is", not_take_exam_count)

```

# Question 4

```{r}
#| echo: false
#| message: false
ggplot(grades, aes(x = Exam)) +
  geom_histogram() +
  labs(
    title = "Distribution of Grades at Exam",
    x = "Exam Grades whitout na",
    y = "Frequency")
```

In the second graph we have excluding the na to avoid the error message from ggplot.

```{r}
Exam_without_na <- grades |> filter(!is.na(Exam))

Exam_without_na |> ggplot(aes(x = Exam)) +
  geom_histogram(binwidth = 0.7, fill = "darkblue")
```

# Question 5

```{r}
#| echo: false
#| message: false
students_by_group <- grades %>%
  group_by(Group) %>%
  summarise(Count = n())
kable(students_by_group)
```

We have compute the number of students in each Group and include the results in document as a table.

# Question 6

```{r}
#| echo: false
#| message: false
ggplot(grades, aes(x = Group, fill = Group)) + geom_bar() + 
   theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

# Question 7

## First representation

```{r}
#| echo: false
#| message: false
ggplot(grades, aes(x = Exam, fill = Group)) +
  geom_histogram(bins = 20) +
  geom_rug(alpha = 0.03, linewidth = 1.5) +
  facet_wrap(~Group)
```

This graph enable to show the distribution of grades at Exam conditioned by the group.

## Second representation

```{r}
#| echo: false
#| message: false
ggplot(grades, aes(x = Group, y=Exam, fill = Group)) +
  geom_boxplot() +  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```

This graph enable to show the distribution of grades at Exam conditioned by the group, while the first separates the group in each box.

# Question 8

```{r}
missed_exam_counts <- grades %>%
  group_by(Group) %>%
  summarise(missed_exam_counts = sum(is.na(Exam)))

knitr::kable(missed_exam_counts)
```
It shows how many grades it missed in each group.

# Question 9

```{r}
all_Groups <- inner_join(grades, missed_exam_counts, by=join_by("Group"))
```

```{r}
ggplot(all_Groups, aes(x = Group, y = missed_exam_counts)) +
  geom_col() + theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

Here, we have used inner_join to combine data (grades and missed exam counts) to create a single column for each group instead of two. 

# Question 10 

```{r}
grades_long <- grades %>% pivot_longer(
  cols = Exam | starts_with("MCQ_") | starts_with("Online_MCQ_"),
  names_to = "name",
  values_to = "value")
knitr::kable(grades_long)
```

# Question 11 

```{r}
missing_grades_per_student <- grades_long %>%
  group_by(Id) %>%
  summarise(missing_grades_per_student = sum(is.na(value)))
knitr::kable(missing_grades_per_student)
```

# Question 12 

```{r}
ggplot(missing_grades_per_student, aes(x = missing_grades_per_student )) + geom_histogram()
```

```{r}
ggplot(missing_grades_per_student, aes(x = missing_grades_per_student)) +
  geom_density(bins = 30, binwidth = 0.5, fill = "green") +
  labs(
    title = "Distribution of Missing Grades per Student",
    x = "Total Missing Grades",
    y = "Density"
  )
```
# Question 13 

```{r}
exam_new_grades <- grades_long |> filter(str_starts(name, "Exam"))
missed_exam_counts_2 <- exam_new_grades %>% group_by(Group) %>%
  summarise(nber_na_exam2 = sum(is.na(value)))
knitr::kable(missed_exam_counts_2)
```


